// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type AddressInput struct {
	//  Client address street
	AddressStreet string `json:"addressStreet"`
	//  Client address postal code
	AddressPc int `json:"addressPC"`
	//  Client address city
	AddressCity string `json:"addressCity"`
	//  Client address state
	AddressState string `json:"addressState"`
	//  Client address country
	AddressCountry string `json:"addressCountry"`
}

type APIKey struct {
	//  ApiKey Index
	ID int `json:"id"`
	//  ApiKey Value
	Key string `json:"key"`
	//  ApiKey Client Relation
	ClientID int `json:"clientID"`
	//  ApiKey Client Info
	Client *Client `json:"client"`
	//  ApiKey staging environment indication.
	IsDev bool `json:"isDev"`
	//  ApiKey admin privileges indication.
	IsAdmin bool `json:"isAdmin"`
}

type Category struct {
	//  Category ID
	ID int `json:"id"`
	//  Category name
	Name string `json:"name"`
	//  Products available in the category
	Products []*Product `json:"products" gorm:"many2many:product_categories;"`
}

type Client struct {
	//  Client ID
	ID int `json:"id"`
	//  Client name
	Name string `json:"name"`
	//  Client address street
	AddressStreet string `json:"addressStreet"`
	//  Client address postal code
	AddressPc int `json:"addressPC"`
	//  Client address city
	AddressCity string `json:"addressCity"`
	//  Client address state
	AddressState string `json:"addressState"`
	//  Client address country
	AddressCountry string `json:"addressCountry"`
	//  Monthly fee
	MonthlyFee float64 `json:"monthlyFee"`
	//  Terms and conditions of the client
	Tc string `json:"tc"`
	//  Client contact name
	ContactName string `json:"contactName"`
	//  Client contact last name
	ContactLastName string `json:"contactLastName"`
	//  Client contact title
	ContactTitle string `json:"contactTitle"`
	//  Client contact email
	ContactEmail string `json:"contactEmail"`
	//  Client purchases
	Purchases []*Purchase `json:"purchases"`
	//  Client premium status
	IsPremium bool `json:"isPremium"`
	//  Client admin status
	IsAdmin bool `json:"isAdmin"`
	//  Client login username
	UserName string `json:"userName"`
	//  Client login hashed password
	Password string `json:"password"`
	//  Float Account Balance
	Balance float64 `json:"balance"`
	//  ApiKeys
	APIKeys []*APIKey `json:"apiKeys"`
}

type ClientFilter struct {
	//  Client ID
	ID *int `json:"id"`
	//  Client name
	Name *string `json:"name"`
	//  Client address postal code
	AddressPc *int `json:"addressPC"`
	//  Client address state
	AddressState *string `json:"addressState"`
	//  Client address country
	AddressCountry *string `json:"addressCountry"`
}

type ClientInput struct {
	//  Client ID
	ID *int `json:"id"`
	//  Client name
	Name string `json:"name"`
	//  CLient location info
	Address *AddressInput `json:"address"`
	//  Monthly fee
	MonthlyFee float64 `json:"monthlyFee"`
	//  Terms and conditions of the client
	Tc string `json:"tc"`
	//  Company Contact Details
	ContactDetails *ContactInput `json:"contactDetails"`
	//  Client premium status
	IsPremium bool `json:"isPremium"`
	//  Client admin status
	IsAdmin bool `json:"isAdmin"`
	//  Client login username
	UserName string `json:"userName"`
}

type ContactInput struct {
	//  Client contact name
	ContactName string `json:"contactName"`
	//  Client contact last name
	ContactLastName string `json:"contactLastName"`
	//  Client contact title
	ContactTitle string `json:"contactTitle"`
	//  Client contact email
	ContactEmail string `json:"contactEmail"`
}

type Country struct {
	//  Country ID
	ID string `json:"id" gorm:"primaryKey"`
	//  Country name
	Name string `json:"name"`
	//  Products available in the country
	Products []*Product `json:"products" gorm:"many2many:product_countries;"`
}

type CurrencyRate struct {
	Currency string  `json:"currency" gorm:"primaryKey"`
	Value    float64 `json:"value"`
}

type DateRange struct {
	//  *** Start
	Start int `json:"start"`
	//  *** End
	End int `json:"end"`
}

type MetaProvider struct {
	//  MetaProvider ID
	ID int `json:"id"`
	//  MetaProvider name
	Name string `json:"name"`
}

type PhoneNumber struct {
	//  ***
	CountryCode string `json:"countryCode"`
	//  ***
	PhoneNumber string `json:"phoneNumber"`
}

type PriceRange struct {
	//  ***
	MinPrice *float64 `json:"minPrice"`
	//  ***
	MaxPrice *float64 `json:"maxPrice"`
}

type Product struct {
	//  Product ID
	ID int `json:"id"`
	//  Indicates if the product is available
	Available bool `json:"available"`
	//  Product currency
	Currency string `json:"currency"`
	//  Product description
	Description string `json:"description"`
	//  Absolute product discount, expressed in net amount
	DiscountAbsolute float64 `json:"discountAbsolute"`
	//  Product discount percentage, expressed as a decimal from 0 to 1 ***
	DiscountPercentage float64 `json:"discountPercentage"`
	//  Fixed maximum price of the product in eur
	EurMaxPrice float64 `json:"eurMaxPrice"`
	//  Fixed minium price of the product in eur
	EurMinPrice float64 `json:"eurMinPrice"`
	//  Fixed maximum price of the product
	FixedMaxPrice float64 `json:"fixedMaxPrice"`
	//  Fixed minimum price of the product
	FixedMinPrice float64 `json:"fixedMinPrice"`
	//  Product name
	FullName string `json:"fullName"`
	//  Indicates if the product has a discount
	HasDiscount bool `json:"hasDiscount"`
	//  Indicates if the product has a fixed price
	IsFixedPrice bool `json:"isFixedPrice"`
	//  Indicates if the product is premium
	IsPremium bool `json:"isPremium"`
	//  Product country, expressed with ISO 3166 Alpha-2 code
	Locale string `json:"locale"`
	//  Online terms and conditions of the product represented in a string, in some cases with urls in between
	OnlineTc string `json:"onlineTc"`
	//  Original product ID
	OriginalID string `json:"originalID"`
	//  MetaProvider ID
	MetaProviderID int `json:"metaProviderID"`
	//  MetaProvider data
	MetaProvider *MetaProvider `json:"metaProvider"`
	//  Provider ID
	ProviderID int `json:"providerID"`
	//  Provider data
	Provider *Provider `json:"provider"`
	//  Instructions to redeem the product
	RedeemInstructions string `json:"redeemInstructions"`
	//  Site to redeem the product
	RedeemSite string `json:"redeemSite"`
	//  If the product requires seller to send end user mail info
	RequireMail bool `json:"requireMail"`
	//  If the product requires seller to send end user mobile number info
	RequirePhone bool `json:"requirePhone"`
	//  If the product requires seller to send end user extra info
	RequireOther bool `json:"requireOther"`
	//  Whether the product requires user identity
	RequiresUserIdentity bool `json:"requiresUserIdentity"`
	//  Terms and conditions of the product represented in a string
	Tc string `json:"tc"`
	//  URL Image of the product
	URLImage string `json:"urlImage"`
	//  Array containing the countries where the product can be found
	Countries []*Country `json:"countries" gorm:"many2many:product_countries;"`
	//  ***
	Variants []*Variant `json:"variants"`
	//  Array with categories where the product can be found
	Categories []*Category `json:"categories" gorm:"many2many:product_categories;"`
}

type ProductAdmin struct {
	//  Product ID
	ID int `json:"id"`
	//  Indicates if the product is available
	Available bool `json:"available"`
	//  Product currency
	Currency string `json:"currency"`
	//  Product description
	Description string `json:"description"`
	//  Product custom description
	CustomDescription string `json:"customDescription"`
	//  Absolute product discount, expressed in net amount
	DiscountAbsolute float64 `json:"discountAbsolute"`
	//  Product discount percentage, expressed as a decimal from 0 to 1 ***
	DiscountPercentage float64 `json:"discountPercentage"`
	//  Custom Product Discount
	CustomDiscount float64 `json:"customDiscount"`
	//  Fixed maximum price of the product in eur
	EurMaxPrice float64 `json:"eurMaxPrice"`
	//  Fixed minium price of the product in eur
	EurMinPrice float64 `json:"eurMinPrice"`
	//  Fixed maximum price of the product
	FixedMaxPrice float64 `json:"fixedMaxPrice"`
	//  Fixed minimum price of the product
	FixedMinPrice float64 `json:"fixedMinPrice"`
	//  Product name
	FullName string `json:"fullName"`
	//  Product custom name
	CustomFullName string `json:"customFullName"`
	//  Indicates if the product has a discount
	HasDiscount bool `json:"hasDiscount"`
	//  Indicates if the product has a fixed price
	IsFixedPrice bool `json:"isFixedPrice"`
	//  Indicates if the product is premium
	IsPremium bool `json:"isPremium"`
	//  Product country, expressed with ISO 3166 Alpha-2 code
	Locale string `json:"locale"`
	//  Online terms and conditions of the product represented in a string, in some cases with urls in between
	OnlineTc string `json:"onlineTc"`
	//  Original product ID
	OriginalID string `json:"originalID"`
	//  MetaProvider ID
	MetaProviderID int `json:"metaProviderID"`
	//  MetaProvider data
	MetaProvider *MetaProvider `json:"metaProvider"`
	//  Provider ID
	ProviderID int `json:"providerID"`
	//  Provider data
	Provider *Provider `json:"provider"`
	//  Instructions to redeem the product
	RedeemInstructions string `json:"redeemInstructions"`
	//  Site to redeem the product
	RedeemSite string `json:"redeemSite"`
	//  If the product requires seller to send end user mail info
	RequireMail bool `json:"requireMail"`
	//  If the product requires seller to send end user mobile number info
	RequirePhone bool `json:"requirePhone"`
	//  If the product requires seller to send end user extra info
	RequireOther bool `json:"requireOther"`
	//  Whether the product requires user identity
	RequiresUserIdentity bool `json:"requiresUserIdentity"`
	//  Terms and conditions of the product represented in a string
	Tc string `json:"tc"`
	//  URL Image of the product
	URLImage string `json:"urlImage"`
	//  Custom URL Image of the product
	CustomURLImage string `json:"customUrlImage"`
	//  Array containing the countries where the product can be found
	Countries []*Country `json:"countries" gorm:"many2many:product_countries;"`
	//  ***
	Variants []*Variant `json:"variants"`
	//  Array with categories where the product can be found
	Categories []*Category `json:"categories" gorm:"many2many:product_categories;"`
	//  Special field for provider specific product info. Ex store for Baluwo or ean for Ding.
	ProductType string `json:"ProductType"`
}

type ProductFilter struct {
	//  Product ID
	ID *int `json:"id"`
	//  Product country, expressed with ISO 3166 Alpha-2 code
	Locale *string `json:"locale"`
	//  Product provider ID
	ProviderID *int `json:"providerID"`
	//  Product name
	FullName *string `json:"fullName"`
	//  Product premium flag
	IsPremium *bool `json:"isPremium"`
}

type ProductInput struct {
	//  Product custom name
	CustomFullName string `json:"customFullName"`
	//  Indicates if the product has a discount
	CustomDiscount float64 `json:"customDiscount"`
	//  Custom URL Image of the product
	CustomURLImage string `json:"customUrlImage"`
	//  Product custom description
	CustomDescription string `json:"customDescription"`
}

type Provider struct {
	//  Provider ID
	ID int `json:"id"`
	//  URL Image of the provider
	Image string `json:"image"`
	//  MetaProvider ID
	MetaProviderID int `json:"metaProviderID"`
	//  MetaProvider data
	MetaProvider *MetaProvider `json:"metaProvider"`
	//  Provider name
	Name string `json:"name"`
	//  Original provider ID
	OriginalID string `json:"originalId"`
}

type ProviderFilter struct {
	//  Provider name
	Name string `json:"name"`
}

type Purchase struct {
	//  Purchase ID
	ID int `json:"id"`
	//  Client ID of the purchase
	ClientID int `json:"clientID"`
	//  Unique transaction ID from the client.
	TransactionID string `json:"TransactionID"`
	//  Client of the purchase
	Client *Client `json:"client"`
	//  Product ID of the purchase
	ProductID int `json:"productID"`
	//  Product of the purchase
	Product *Product `json:"product"`
	//  Total purchase price in euros
	TotalValue float64 `json:"totalValue"`
	//  Total purchase price in the original currency
	OriginalValue float64 `json:"originalValue"`
	//  End user name
	EndUserName string `json:"EndUserName"`
	//  End user email
	EndUserEmail string `json:"EndUserEmail"`
	//  End user country
	EndUserCountry string `json:"EndUserCountry"`
	//  End user country phone code
	EndUserPhoneCountryCode string `json:"EndUserPhoneCountryCode"`
	//  End user phone number
	EndUserPhoneNumber string `json:"EndUserPhoneNumber"`
	//  Extra field for service payment data.
	EndUserSecondNumber string `json:"EndUserSecondNumber"`
	//  Timestamp for the purchase request from out client in UTC
	TimestampRequest int `json:"timestampRequest"`
	//  Timestamp for the purchase delivery in UTC
	TimestampFulfilled int `json:"timestampFulfilled"`
	//  Reedem Code for the purchase.
	RedeemCode string `json:"redeemCode"`
	//  Provider information on product redeem.
	Receipt string `json:"receipt"`
	//  Stores any error from Provider API
	ErrorMessage string `json:"errorMessage"`
}

type PurchaseFilter struct {
	//  *** Purchase ID
	ID *int `json:"id"`
	//  *** Timestamp for the purchase, in Unix Timestamp format
	DateRange *DateRange `json:"dateRange"`
	//  *** Client ID of the purchase
	ClientID *int `json:"clientID"`
	//  *** Product ID of the purchase
	ProductID *int `json:"productID"`
	//  *** Price range in euros
	PriceRange *PriceRange `json:"priceRange"`
}

type PurchaseInput struct {
	//  Internal transaction ID of your organization.
	TransactionID string `json:"transactionID"`
	//  End User information, meant for product delivery and analytics
	UserInfo *UserInfoInput `json:"userInfo"`
	//  Product Identifier
	ProductID int `json:"productID"`
	//  Total Value of the Purchase
	TotalValue float64 `json:"totalValue"`
	//  Currency used in the purchase
	Currency string `json:"currency"`
}

type UserInfoInput struct {
	//  End User contact email. Only to be used for support purposes.
	Email string `json:"email"`
	//  End User contact name. Only to be used for support purposes.
	Name string `json:"name"`
	//  End User country in ISO 3166 Alpha-2 code (MX, US, DE, etc...).
	Country string `json:"country"`
	//  End User country phone code in ISO 3166 Alpha-2 code (+52, +1, +49, etc...).
	PhoneCountryCode string `json:"phoneCountryCode"`
	//  End User country phone number without ISO code. Required when purchasing a mobile product.
	PhoneNumber *string `json:"phoneNumber"`
	//  End User utility service account number.
	ServiceNumber *string `json:"serviceNumber"`
}

type Variant struct {
	//  Variant ID
	ID int `json:"id"`
	//  Variant product ID
	ProductID int `json:"productID"`
	//  Variant productAdmin ID
	ProductAdminID int `json:"productAdminID"`
	//  Variant price
	Price float64 `json:"price"`
	//  Variant value
	Value float64 `json:"value"`
}
